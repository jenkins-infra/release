// -*- Groovy -*-

/*
  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent
*/

pipeline {
    agent {
      kubernetes {
        label 'release-component-remoting'
        yamlFile 'PodTemplates.d/release-linux.yaml'
      }
    }

    options {
      disableConcurrentBuilds()
    }

    environment {
      AZURE_VAULT_NAME              = 'prodreleasecore'
      AZURE_VAULT_CERT              = 'prodreleasecore'
      AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
      AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
      AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
      GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
      GPG_FILE                      = 'jenkins-release.gpg'
      MAVEN_REPOSITORY_USERNAME     = credentials('maven-repository-username')
      MAVEN_REPOSITORY_PASSWORD     = credentials('maven-repository-password')
      SIGN_STOREPASS                = credentials('signing-cert-pass')
      RELEASE_PROFILE               = "components/remoting"
    }

    stages {
      stage('Clone Remoting Git Repository') {
        steps {
          sshagent(['release-key']) {
            sh 'utils/release.bash --cloneReleaseGitRepository'
          }
        }
      }
      stage('Clean Release') {
        steps {
          sh 'utils/release.bash --cleanRelease'
        }
      }
      stage('Plan') {
        steps {
          sh 'utils/release.bash --showReleasePlan'
        }
      }
      stage('Validate') {

        input {
          message 'Are you ok to proceed?'
        }

        steps {
          sh 'echo Validated'
        }
      }

      stage('Get Code Signing Certificate') {
        steps {
          sh '''
            utils/release.bash --downloadAzureKeyvaultSecret
            utils/release.bash --configureKeystore
          '''
        }
      }
      stage('Get GPG key') {
        steps {
          sh '''
            utils/release.bash --getGPGKeyFromAzure
          '''
        }
      }
      stage('Prepare Release') {
        steps {
          // Maven Release requires gpg key with password password and a certificate key with password
          sh '''
            utils/release.bash --configureGPG
            utils/release.bash --configureGit
            utils/release.bash --prepareRelease
          '''

          script {
            env.RELEASE_SCM_TAG = sh(returnStdout: true, script: 'fgrep scm.tag= release/release.properties | cut -c9-').trim()
          }
        }
      }
      stage('Push Commits') {
        steps {
          sshagent(['release-key']) {
            sh 'utils/release.bash --pushCommits'
          }
        }
      }
      stage('Stage Release') {
        steps {
          sh '''
            utils/release.bash --performRelease
          '''
        }
      }
    }
    post {
      failure {
        input '''Can I delete the pod? '''
      }
    }
}
