// -*- Groovy -*-

/*
  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent
*/

pipeline {
  agent {
    kubernetes {
      label 'release-linux'
      yamlFile 'PodTemplates.d/release-linux.yaml'
      inheritFrom 'jnlp-linux'
    }
  }

  parameters {
    choice(
      choices: [
        'security',
        'stable',
        'stable-rc',
        'weekly'
      ],
      description: 'Define which release profile we are going to use. https://git.io/Jv7Nr',
      name: 'RELEASE_PROFILE'
    )
    string(
      defaultValue: '',
      description: 'Define which branch we are going to release from and commit changes',
      name: 'RELEASE_GIT_BRANCH',
      trim: false
    )
    string(
      defaultValue: '',
      description: 'Define which maven repository to use to push Maven artifacts',
      name: 'MAVEN_REPOSITORY_NAME',
      trim: false
    )
    booleanParam(
      defaultValue: true,
      description: 'Define if we wait for validation after displaying the plan',
      name: 'VALIDATION_ENABLED'
    )
  }

  options {
    disableConcurrentBuilds()
  }

  environment {
    AZURE_VAULT_NAME              = 'prodreleasecore'
    AZURE_VAULT_CERT              = 'prodreleasecore'
    AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
    AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
    AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
    GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
    GPG_FILE                      = 'jenkins-release.gpg'
    MAVEN_REPOSITORY_USERNAME     = credentials('maven-repository-username')
    MAVEN_REPOSITORY_PASSWORD     = credentials('maven-repository-password')
    SIGN_STOREPASS                = credentials('signing-cert-pass')
  }

  stages {
    stage('Clone Release Git Repository') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('jnlp') {
          sshagent(['release-key']) {
            sh 'utils/release.bash --cloneReleaseGitRepository'
          }
        }
      }
    }
    stage('Clean Release') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('maven') {
          sh 'utils/release.bash --cleanRelease'
        }
      }
    }
    stage('Plan') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('maven') {
          sh 'utils/release.bash --showReleasePlan'
        }
      }
    }
    stage('Validate') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      when {
        environment name: 'VALIDATION_ENABLED', value: 'true'
        beforeInput true
      }

      input {
        message 'Are you ok to proceed?'
      }

      steps {
        container('jnlp'){
          sh 'echo Validated'
        }
      }
    }
    stage('Get Code Signing Certificate') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('azure-cli') {
          sh '''
            utils/release.bash --downloadAzureKeyvaultSecret
            utils/release.bash --configureKeystore
          '''
        }
      }
    }
    stage('Get GPG key') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('azure-cli') {
          sh '''
            utils/release.bash --getGPGKeyFromAzure
          '''
        }
      }
    }
    stage('Prepare Release') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('maven') {
          // Maven Release requires gpg key with password password and a certificate key with password
          sh '''
            utils/release.bash --configureGPG
            utils/release.bash --configureGit
            utils/release.bash --prepareRelease
          '''

          script {
            def properties = readProperties file: 'release/release.properties'
            env.RELEASE_SCM_TAG = properties['scm.tag']
          }
        }
      }
    }
    stage('Push Commits') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      // environment {
      //   GIT_SSH = 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i $RELEASE_SSH_KEY'
      // }

      steps {
        // ssh has doesn't work when no user is associated to a uid like 1000, therefor I run git command from
        // the jnlp container.
        container('jnlp') {
          // https://github.com/jenkinsci/kubernetes-plugin/pull/331
          // therefor we use withCredentials instead of sshagent
          // it's fine if used from the jnlp container
          sshagent(['release-key']) {
            // We want to only commit to the repository used by the jenkins job
            // instead of jenkinsci/jenkins as defined in pom.xml
            sh 'utils/release.bash --pushCommits'
          }
          // withCredentials([sshUserPrivateKey(credentialsId: 'release-key', keyFileVariable: 'RELEASE_SSH_KEY')]) {
          //   sh 'utils/release.bash --pushCommits'
          // }

        }
      }
    }
    stage('Stage Release') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('maven') {
          sh '''
            utils/release.bash --stageRelease
          '''
        }
      }
    }
    stage('Verify artifacts') {
      when {
        not {
          environment name: 'BUILD_NUMBER', value: '1'
        }
        beforeAgent true
      }

      steps {
        container('maven') {
          sh '''
            utils/release.bash --verifyGPGSignature
          '''
          sh '''
            utils/release.bash --verifyCertificateSignature
          '''
        }
      }
    }
  }
  post {
    failure {
      input '''Can I delete the pod? '''
    }
  }
}
