// -*- Groovy -*-

/*
  Jenkins Plugins:
    * Azure-Credentials
    * SSH-agent
    * Kubernetes
*/

pipeline {
  agent {
    kubernetes {
      yamlFile 'PodTemplates.d/release-linux.yaml'
    }
  }

  parameters {
    choice(
      choices: [
        'security',
        'stable',
        'stable-rc',
        'weekly'
      ],
      description: 'Define which release profile we are going to use. https://github.com/jenkins-infra/release/tree/master/profile.d',
      name: 'RELEASE_PROFILE'
    )
    string(
      defaultValue: '',
      description: 'Define which branch we are going to release from and commit changes',
      name: 'RELEASE_GIT_BRANCH',
      trim: false
    )
    string(
      defaultValue: '',
      description: 'Define which maven repository to use to push Maven artifacts',
      name: 'MAVEN_REPOSITORY_NAME',
      trim: false
    )
    booleanParam(
      defaultValue: true,
      description: 'Define if we wait for validation after displaying the plan',
      name: 'VALIDATION_ENABLED'
    )
  }

  options {
    disableConcurrentBuilds()
  }

  environment {
    AZURE_VAULT_NAME              = 'prodreleasecore'
    AZURE_VAULT_CERT              = 'prodreleasecore'
    AZURE_VAULT_CLIENT_ID         = credentials('azure-vault-client-id')
    AZURE_VAULT_CLIENT_SECRET     = credentials('azure-vault-client-secret')
    AZURE_VAULT_TENANT_ID         = credentials('azure-vault-tenant-id')
    GPG_PASSPHRASE                = credentials('release-gpg-passphrase')
    GPG_FILE                      = 'jenkins-release.gpg'
    MAVEN_REPOSITORY_USERNAME     = credentials('maven-repository-username')
    MAVEN_REPOSITORY_PASSWORD     = credentials('maven-repository-password')
    SIGN_STOREPASS                = credentials('signing-cert-pass')
  }

  stages {
    stage('Clone Release Git Repository') {
      steps {
        sshagent(['release-key']) {
          sh 'utils/release.bash --cloneReleaseGitRepository'
        }
      }
    }
    stage('Clean Release') {
      steps {
        sh 'utils/release.bash --cleanRelease'
      }
    }
    stage('Plan') {
      steps {
        sh 'utils/release.bash --showReleasePlan'
      }
    }
    stage('Validate') {
      when {
        environment name: 'VALIDATION_ENABLED', value: 'true'
        beforeInput true
      }

      input {
        message 'Are you ok to proceed?'
      }

      steps {
        sh 'echo Validated'
      }
    }
    stage('Get Code Signing Certificate') {
      steps {
        sh '''
          utils/release.bash --downloadAzureKeyvaultSecret
          utils/release.bash --configureKeystore
        '''
      }
    }
    stage('Get GPG key') {
      steps {
        sh '''
          utils/release.bash --getGPGKeyFromAzure
        '''
      }
    }
    stage('Prepare Release') {
      steps {
        // Maven Release requires gpg key with password password and a certificate key with password
        sh '''
          utils/release.bash --configureGPG
          utils/release.bash --configureGit
          utils/release.bash --prepareRelease
        '''

        script {
          env.RELEASE_SCM_TAG = sh(returnStdout: true, script: 'fgrep scm.tag= release/release.properties | cut -c9-').trim()
        }
      }
    }
    stage('Push Commits') {
      steps {
        sshagent(['release-key']) {
          // We want to only commit to the repository used by the jenkins job
          // instead of jenkinsci/jenkins as defined in pom.xml
          sh 'utils/release.bash --pushCommits'
        }
      }
    }
    stage('Stage Release') {
      steps {
        sh '''
          utils/release.bash --stageRelease
        '''
      }
    }
    stage('Verify artifacts') {
      steps {
        sh '''
          utils/release.bash --verifyGPGSignature
          utils/release.bash --verifyCertificateSignature
        '''
      }
    }
  }
  post {
    failure {
      input '''Can I delete the pod? '''
    }
  }
}
