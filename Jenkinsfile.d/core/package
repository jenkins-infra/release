pipeline {
  agent {
    kubernetes {
      label 'package-linux'
      yamlFile 'PodTemplates.d/package-linux'
      inheritFrom 'jnlp-linux'
      workingDir '/home/jenkins/agent'
    }
  }

  parameters {
    choice(
      choices: [
        'weekly',
        'stable',
        'security'
      ],
      description: 'Define which Jenkins Release we are packaging for. https://git.io/Jv7Nr',
      name: 'RELEASE_PROFILE'
    )
    string(
      defaultValue: '',
      description: 'Define which Jenkins Version to package',
      name: 'JENKINS_VERSION',
      trim: false
    )
    string(
      defaultValue: '',
      description: 'Define staging git branch uses for promotion',
      name: 'RELEASE_GIT_BRANCH',
      trim: false
    )
    string(
      defaultValue: '',
      description: 'Define which maven repository to use for packaging and promotion',
      name: 'MAVEN_REPOSITORY_NAME',
      trim: false
    )
    string(
      defaultValue: '',
      description: 'Define which maven repository to promote to if MAVEN_STAGING_REPOSITORY_PROMOTION_ENABLED set to true',
      name: 'MAVEN_REPOSITORY_PRODUCTION_NAME',
      trim: false
    )
    booleanParam(
      defaultValue: false,
      description: 'Enable Maven repository promotion',
      name: 'MAVEN_STAGING_REPOSITORY_PROMOTION_ENABLED'
    )
    booleanParam(
      defaultValue: false,
      description: 'Enable Git repository promotion',
      name: 'GIT_STAGING_REPOSITORY_PROMOTION_ENABLED'
    )
    booleanParam(
      defaultValue: true,
      description: 'Define if we wait for validation after displaying the plan or not',
      name: 'VALIDATION_ENABLED'
    )
    booleanParam(
      defaultValue: true,
      description: 'Enable Windows Packaging',
      name: 'WINDOWS_PACKAGING_ENABLED'
    )
  }

  options {
    disableConcurrentBuilds()
  }

//  ENV JENKINS_VERSION
//    stable: It represents the latest stable version that satifies version pattern X.Y.Z
//    weekly: It represents the latest weekly version that satisfies version pattern X.Y
//    <version>: where version represent any valid existing version like 2.176.2

  environment {
    AZURE_VAULT_NAME          = 'prodreleasecore'
    AZURE_VAULT_CERT          = 'prodreleasecore'
    AZURE_VAULT_CLIENT_ID     = credentials('azure-vault-client-id')
    AZURE_VAULT_CLIENT_SECRET = credentials('azure-vault-client-secret')
    AZURE_VAULT_TENANT_ID     = credentials('azure-vault-tenant-id')
    GPG_FILE                  = 'jenkins-release.gpg'
    GPG_PASSPHRASE            = credentials('release-gpg-passphrase')
    PACKAGING_GIT_REPOSITORY  = 'git@github.com:jenkinsci/packaging.git'
    PACKAGING_GIT_BRANCH      = 'stable-2.263'
    SIGN_KEYSTORE_FILENAME    = 'jenkins.pfx'
    SIGN_STOREPASS            = credentials('signing-cert-pass')
    WAR_FILENAME              = 'jenkins.war'
    WAR                       = "$WORKSPACE/$WORKING_DIRECTORY/$WAR_FILENAME"
    MAVEN_REPOSITORY_USERNAME = credentials('maven-repository-username')
    MAVEN_REPOSITORY_PASSWORD = credentials('maven-repository-password')
    MSI_FILENAME              = 'jenkins.msi'
    MSI                       = "$WORKSPACE/$WORKING_DIRECTORY/$MSI_FILENAME"
    WORKING_DIRECTORY         = "release"
    PKCS12_FILE               = "$WORKSPACE/$WORKING_DIRECTORY/jenkins.pfx" // Created by SIGN_KEYSTORE
    PKCS12_PASSWORD_FILE      = credentials('signing-cert-pass')
  }

  stages {
    stage('Plan') {
      steps {
        container('packaging') {
          sh 'utils/release.sh --showPackagingPlan'
        }
      }
    }
    stage('Validate') {
      when {
        environment name: 'VALIDATION_ENABLED', value: 'true'
        beforeInput true
      }

      input {
        message 'Are you ok to proceed?'
      }

      steps {
        container('jnlp'){
          sh 'echo Validated'
        }
      }

    }
    stage('Get GPG key') {

      steps {
        container('azure-cli') {
          checkout scm
          dir (WORKING_DIRECTORY){
            git branch: PACKAGING_GIT_BRANCH, credentialsId: 'release-key', url: PACKAGING_GIT_REPOSITORY
          }

          sh '''
            ./utils/release.sh --getGPGKeyFromAzure
          '''

          dir (WORKING_DIRECTORY){
            stash includes: GPG_FILE , name: 'GPG'
          }
        }

        container('packaging'){
          sh './utils/release.sh --configureGPG'
        }
      }
    }

    stage('Get Code Signing Certificate') {

      steps {
        container('azure-cli') {
          sh '''
            utils/release.sh --downloadAzureKeyvaultSecret
            utils/release.sh --configureKeystore
          '''
        }

        stash includes: SIGN_KEYSTORE_FILENAME, name: 'KEYSTORE'
      }
    }

    stage('Download WAR archive to package'){
      steps{
        container('packaging'){
          sh '''
            ./utils/release.sh --downloadJenkins
          '''
          dir (WORKING_DIRECTORY){
            stash includes: WAR_FILENAME, name: "WAR"
            archiveArtifacts artifacts: "*.war"
          }
        }
      }
    }
    stage('Package'){
      failFast false
      parallel {
        stage('WAR') {
          stages {
            stage('Publish'){
              steps {
                container('packaging'){
                  sshagent(['pkgserver']) {
                    sh '''
                      ./utils/release.sh --packaging war.publish
                    '''
                  }
                }
              }
            }
          }
        }
        stage('Debian') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  sh '''
                    ./utils/release.sh --packaging deb
                  '''
                  dir (WORKING_DIRECTORY){
                    archiveArtifacts artifacts: "target/debian/*.deb"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  sshagent(['pkgserver']) {
                    sh '''
                      ./utils/release.sh --packaging deb.publish
                    '''
                  }
                }
              }
            }
          }
        }
        stage('Redhat') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  sh '''
                    ./utils/release.sh --packaging rpm
                  '''
                  dir (WORKING_DIRECTORY){
                    archiveArtifacts artifacts: "target/rpm/*.rpm"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  sshagent(['pkgserver']) {
                    sh '''
                      ./utils/release.sh --packaging rpm.publish
                    '''
                  }
                }
              }
            }
          }
        }
        stage('Suse') {
          stages {
            stage('Build'){
              steps {
                container('packaging'){
                  sh '''
                    ./utils/release.sh --packaging suse
                  '''
                  dir (WORKING_DIRECTORY){
                    archiveArtifacts artifacts: "target/suse/*.rpm"
                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging'){
                  sshagent(['pkgserver']) {
                    sh '''
                      ./utils/release.sh --packaging suse.publish
                    '''
                  }
                }
              }
            }
          }
        }
        stage('Windows') {
          when {
            environment name: 'WINDOWS_PACKAGING_ENABLED', value: 'true'
          }
          stages {
            stage('Build') {
              // Windows requirement: Every steps need to be executed inside default jnlp
              // as the step 'container' is known to not be working
              agent {
                kubernetes {
                  label 'packaging-windows'
                  yamlFile 'PodTemplates.d/package-windows'
                }
              }
              steps {
                container('dotnet') {
                  checkout scm
                  dir (WORKING_DIRECTORY){
                    git branch: PACKAGING_GIT_BRANCH, credentialsId: 'release-key', url: PACKAGING_GIT_REPOSITORY

                    unstash 'GPG'
                    unstash 'WAR'
                    unstash 'KEYSTORE'

                    powershell '''
                      Get-ChildItem env:
                      $env:WAR=(Resolve-Path .\\jenkins.war).Path
                      & .\\make.ps1
                    '''
                    // Don't archive the full path
                    dir('msi\\build\\bin\\Release\\en-US') {
                      archiveArtifacts '*.msi*'
                    }

                  }
                }
              }
            }
            stage('Publish'){
              steps {
                container('packaging') {
                  unarchive mapping: ['*.msi*': WORKING_DIRECTORY]
                  sshagent(['pkgserver']) {
                    sh '''
                      ./utils/release.sh --packaging msi.publish
                    '''
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Promote'){
      failFast true
      parallel {
        stage('Maven Repository') {
          when {
            environment name: 'MAVEN_STAGING_REPOSITORY_PROMOTION_ENABLED', value: 'true'
          }

          steps {
            container('packaging'){
              sshagent(['pkgserver']) {
                sh '''
                  ./utils/release.sh --promoteStagingMavenArtifacts
                '''
              }
            }
          }
        }
        stage('Git Repository') {
          when {
            environment name: 'GIT_STAGING_REPOSITORY_PROMOTION_ENABLED', value: 'true'
          }
          steps {
            container('packaging'){
              sshagent(['pkgserver']) {
                sh '''
                  ./utils/release.sh --promoteStagingGitRepository
                '''
              }
            }
          }
        }
      }
    }
    // Force mirror synchronization
    stage('Synchronize mirror'){
      steps{
        container('packaging'){
          sshagent(['pkgserver']) {
            sh '''
              ./utils/release.sh --syncMirror
            '''
          }
        }
      }
    }
    stage('Invalidate Fastly Cache'){
      environment {
        FASTLY_API_TOKEN = credentials('fastly-api-token')
        FASTLY_SERVICE_ID = credentials('fastly_pkgserver_service_id')
      }
      steps{
        container('packaging'){
          sshagent(['pkgserver']) {
            sh '''
              ./utils/release.sh --invalidateFastlyCache
            '''
          }
        }
      }
    }
  }
    post {
      failure {
        input '''Can I delete the pod? '''
      }
    }
}
