#!/usr/bin/env groovy
import groovy.xml.XmlSlurper;

class Script {

    private static final String PREFIX = "https://issues.jenkins.io/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?tempMax=1000&jqlQuery=";

    static Integer main(String[] args) {

        if (args.size() != 1) {
            System.err.println("Usage lts-candidate-stats <version>")
            System.exit 1
        }

        def version = args[0];

        def targetVersion = ['bash', '-c', "echo 'VERSION=\${project.version}' | mvn help:evaluate | sed -n 's/^VERSION=//p'"].execute().text
        if (!targetVersion.contains(version)) {
            System.err.println("The previous version does not appear to be released yet: " + targetVersion)
            System.exit 1
        }

        def remoteName = ['git', 'for-each-ref', "--format='%(upstream:remotename)'", 'refs/heads/master'].execute().text
        ['git', 'fetch', 'jenkinsci', 'master:master'].execute().text
        println "Latest core version: " + ['git', 'describe', 'master', '--abbrev=0'].execute().text

        def categories = [:];
        categories['Postponed'] = [];
        categories['Rejected'] = fetch(PREFIX + "labels+in+%28${version}-rejected%29").toList()
        categories['Fixed'] = fetch(PREFIX + "labels+in+%28${version}-fixed%29").toList()
        categories['Candidates'] = fetch("https://issues.jenkins.io/sr/jira.issueviews:searchrequest-xml/12146/SearchRequest-12146.xml?tempMax=1000").toList()

        categories['Postponed'] = categories['Candidates'].findAll { c ->
           categories['Rejected'].find { it.key == c.key }
        }
        categories['Rejected'].removeAll(categories['Postponed'])
        categories['Candidates'].removeAll(categories['Postponed'])

        categories.each { title, issues ->
            printListing(title, issues)
        }
        return
    }

    static Iterable fetch(String jql) {
        def text = new URL(jql).text
        return new XmlSlurper().parseText(text).channel.item
    }

    static void printListing(String title, items) {
        if (!items.isEmpty()) {
            println "${title}\n${''.padRight(title.length(), '-')}\n"

            for (it in items) {
                def prio = it.priority.toString()
                if (prio.toLowerCase() in ['blocker', 'critical']) {
                    prio = Ansi.color(prio.padRight(10), Ansi.RED)
                } else {
                    prio = prio.padRight(10)
                }

                def age = Ansi.color(ageIndicator(it), Ansi.YELLOW)
                println "${it.key}\t\t${prio}\t\t${age}"
                println "\t${it.summary}"

                def labels = it.labels.label.collect { it.toString() }
                labels.retainAll(['non-trivial-lts-backporting', 'regression'])
                if (!labels.empty){
                    println "\t${Ansi.color(labels.join(' '), Ansi.RED)}"
                }
                println "\t${it.link}"

                it.issuelinks.issuelinktype.each {
                    if (it.name.toString() == 'Cause') {
                        it.outwardlinks.issuelink.each {
                            def caused = Ansi.color(
                                "Caused https://issues.jenkins.io/browse/${it.toString()}",
                                Ansi.RED
                            )
                            println "\t\t$caused"
                        }
                    }
                }
                println ""
            }
        }
    }

    static String ageIndicator(it) {
        def releasedAs = it.customfields.customfield.find { it.customfieldname == "Released As" }.customfieldvalues as String
        if (releasedAs?.trim()) {
            return releasedAs.replaceAll("[Jj]enkins[ -]", "")
        } else {
            return it.updated
        }
    }

    // Credit https://gist.github.com/tvinke/db4d21dfdbdae49e6f92dcf1ca6120de
    private static class Ansi {

        static final String NORMAL          = "\u001B[0m"

        static final String BOLD            = "\u001B[1m"
        static final String ITALIC          = "\u001B[3m"
        static final String UNDERLINE       = "\u001B[4m"
        static final String BLINK           = "\u001B[5m"
        static final String RAPID_BLINK     = "\u001B[6m"
        static final String REVERSE_VIDEO   = "\u001B[7m"
        static final String INVISIBLE_TEXT  = "\u001B[8m"

        static final String BLACK           = "\u001B[30m"
        static final String RED             = "\u001B[31m"
        static final String GREEN           = "\u001B[32m"
        static final String YELLOW          = "\u001B[33m"
        static final String BLUE            = "\u001B[34m"
        static final String MAGENTA         = "\u001B[35m"
        static final String CYAN            = "\u001B[36m"
        static final String WHITE           = "\u001B[37m"

        static final String DARK_GRAY       = "\u001B[1;30m"
        static final String LIGHT_RED       = "\u001B[1;31m"
        static final String LIGHT_GREEN     = "\u001B[1;32m"
        static final String LIGHT_YELLOW    = "\u001B[1;33m"
        static final String LIGHT_BLUE      = "\u001B[1;34m"
        static final String LIGHT_PURPLE    = "\u001B[1;35m"
        static final String LIGHT_CYAN      = "\u001B[1;36m"

        static String color(String text, String ansiValue) {
            ansiValue + text + NORMAL
        }
    }
}
